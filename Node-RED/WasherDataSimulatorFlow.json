[{"id":"c789455c.cc271","type":"ibmiot","z":"c7aada7a.6beb4","name":"coi0nz"},{"id":"b29cc740.e038e8","type":"inject","z":"2c137dae.57f882","name":"Fluid Simulator","topic":"","payload":"{ \"d\": {\"count\":0, \"hardness\": 61, \"temperature\": 50, \"flowrate\": 11, \"fluidlevel\": \"acceptable\" } }","payloadType":"json","repeat":"1","crontab":"","once":false,"x":288,"y":191,"wires":[["60e09406.323e34"]]},{"id":"ac162366.492e68","type":"ibmiot out","z":"2c137dae.57f882","authentication":"apiKey","apiKey":"c789455c.cc271","outputType":"evt","deviceId":"Washer01","deviceType":"WashingMachine","eventCommandType":"status","format":"json","data":"msg.payload","name":"Washer01","service":"registered","x":794,"y":256.183349609375,"wires":[]},{"id":"dc773943.d36ea","type":"inject","z":"2c137dae.57f882","name":"Voltage Sensor Simulator","topic":"","payload":"{ \"d\": { \"voltage\": 240, \"frequency\": 50 } }","payloadType":"json","repeat":"3","crontab":"","once":false,"x":267.66668701171875,"y":266.1000061035156,"wires":[["635911fd.d2da9"]]},{"id":"f4d58de2.24b028","type":"inject","z":"2c137dae.57f882","name":"Mechanical Sensor Simulator","topic":"","payload":"{ \"d\": { \"speed\": 1200 } }","payloadType":"json","repeat":"5","crontab":"","once":false,"x":275.66668701171875,"y":350.1000061035156,"wires":[["f8c050ab.54cd7"]]},{"id":"60e09406.323e34","type":"function","z":"2c137dae.57f882","name":"Fluid data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\nvar hardness = context.get('hardness')||0;\nvar randomness = context.get('randomness')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 300 == 0) {\n    context.set('randomness',1);\n    context.set('hardness', 83);\n} else if(count % 20 == 0) {\n    context.set('randomness',0);\n} else if(count % 121 == 0) {\n    context.set('randomness',2);\n    context.set('hardness', 100);\n}\n\nif(randomness == 0) {\n    // no variation\n    msg.payload.d.hardness = Math.floor(Math.random() * (80 - 70 + 1) + 70);\n} else if(randomness == 1) {\n    // gradually increase\n    msg.payload.d.hardness = hardness + 1;\n    context.set('hardness', (hardness + 1));\n} else {\n    msg.payload.d.hardness = hardness + 5;\n    context.set('hardness', (hardness + 5));\n}\nmsg.payload.d.temperature = Math.floor(Math.random() * (100 - 80 + 1) + 80);\n\nmsg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"fluid\"\nreturn msg;","outputs":1,"noerr":0,"x":509.5500183105469,"y":190.48333740234375,"wires":[["ac162366.492e68"]]},{"id":"635911fd.d2da9","type":"function","z":"2c137dae.57f882","name":"Voltage data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    msg.payload.d.voltage = Math.floor(Math.random() * (240 - 220) + 220);\n} else {\n    msg.payload.d.voltage = Math.floor(Math.random() * (260 - 240) + 240);\n}\nmsg.payload.d.frequency = Math.floor(Math.random() * (80 - 60 + 1) + 60);\nmsg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"voltage\"\nreturn msg;","outputs":1,"noerr":0,"x":515.5500183105469,"y":265.98333740234375,"wires":[["ac162366.492e68"]]},{"id":"f8c050ab.54cd7","type":"function","z":"2c137dae.57f882","name":"Drum data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    // No variation - within the safe limit\n    msg.payload.d.speed = Math.floor(Math.random() * (1100 - 1000) + 1000);    \n} else {\n    msg.payload.d.speed = Math.floor(Math.random() * (1300 - 1150) + 1150);        \n}\n\n\nmsg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"drum\"\nreturn msg;","outputs":1,"noerr":0,"x":518.5500183105469,"y":349.98333740234375,"wires":[["ac162366.492e68"]]}]